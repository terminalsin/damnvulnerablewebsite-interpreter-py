name: 🚀 Release & Publish

on:
  push:
    branches: [main, master]
    paths: ['package.json']

jobs:
  detect-changes:
    name: 🔍 Version Change Detection
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
      is-prerelease: ${{ steps.check.outputs.prerelease }}
    
    steps:
      - name: 📥 Checkout with history
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 🔍 Detect version changes
        id: check
        run: |
          # Extract current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 Current version: $CURRENT_VERSION"
          
          # Extract previous version
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous package.json"
          PREV_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "📦 Previous version: $PREV_VERSION"
          
          # Restore current package.json
          git checkout HEAD -- package.json
          
          # Check for changes
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "✅ Version changed: $PREV_VERSION → $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            
            # Check if prerelease
            if [[ "$CURRENT_VERSION" == *"-"* ]]; then
              echo "🔍 Detected prerelease version"
              echo "prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ No version change detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  release-publish:
    name: 🚀 Release & Publish to NPM
    needs: detect-changes
    if: needs.detect-changes.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🧪 Run tests
        run: npm run test:ci
        
      - name: 🏗️ Build package
        run: npm run build
        
      - name: 📝 Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.detect-changes.outputs.new-version }}"
          NOTES="🎉 **Release v$VERSION**"
          
          # Try to extract changelog
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
            [ -z "$CHANGELOG" ] && CHANGELOG=$(sed -n "/## $VERSION/,/## /p" CHANGELOG.md | sed '$d' | tail -n +2)
            
            if [ -n "$CHANGELOG" ]; then
              NOTES="$NOTES

          ## 📋 What's Changed
          $CHANGELOG"
            fi
          fi
          
          NOTES="$NOTES

          ---
          **🔗 View Changes:** [\`v$VERSION\`](https://github.com/${{ github.repository }}/compare/v$VERSION...HEAD)"
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 🏷️ Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.detect-changes.outputs.new-version }}"
          PRERELEASE="${{ needs.detect-changes.outputs.is-prerelease }}"
          
          RELEASE_FLAGS=""
          [ "$PRERELEASE" = "true" ] && RELEASE_FLAGS="--prerelease"
          
          gh release create "v$VERSION" \
            --title "🚀 Release v$VERSION" \
            --notes "${{ steps.notes.outputs.notes }}" \
            $RELEASE_FLAGS
            
      - name: ✅ Verify package
        run: |
          echo "📦 Package contents:"
          npm pack --dry-run
          echo "📁 Build output:"
          ls -la dist/
          
      - name: 📤 Publish to NPM
        run: |
          echo "🚀 Publishing v${{ needs.detect-changes.outputs.new-version }} to NPM..."
          npm publish --provenance --access public
          echo "✅ Successfully published to NPM!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 